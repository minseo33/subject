1. Gradle 데이터 소스 설정
	- application.properties에 DB 정보를 선언해 두고, 설정(Configuration)파일에서 참조하는 방법
	- 설정(Configuration)파일에서 DB정보를 직접 입력하는 방법
	
	- @Configuration
		- 스프링은 @Configuration이 선언된 클래스를 자바기반의 설정 파일로 인식.
		- 레거시의 xml 설정 방식을 java클래스로 대체한것으로 생각
		
	- 스프링 컨테이너 : 사전적 의미 -> 무언가를 담는 용기 또는 그릇
				 -> 빈(Bean)의 생성과 사용, 관계, 생명 주기 등을 관리한다.
			Q. 빈(Bean)이란? 쉽게 말해 Java 객체
			 			-> 클래스들이 서로에 대한 의존성이 높을 때(결합도가 높을 때),
			 				컨테이너에서 빈을 주입받는 방법으로 클래스간의 의존성을 낮출 수 있다...?

	- sqlSession
		1. MyBatis 스프링 연동 모듈의 핵심이다..
		2. 쓰레드에 안전하고, 여러 개의 DAO나 Mapper에서 공유할 수 있다.
		3. 필요한 시점에 세션을 닫고, 커밋 또는 롤백하는 것을 포함한 세션의 생명주기를 관리한다....뭔소리지
		
	@Bean //(name = "abc") -> name 속성을 선언하면 메서드명으로는 빈(Bean)을 주입받을 수 없다.
	public SqlSessionFactory SqlSessionFactory() throws Exception{
		SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBena()
		...
	}
	
	@Test
	public void teatByApplicationContext() {
		try{
			syso(context.getBean(name:"abc"));
		}
	}
	
-------------------------------------------------------------------------------------------------

	- AUTO_INCREMENT → 자동증가 할 때 사용
	- CURRENT_TIMESTAMP() → 생성 시간을 자동으로 기록해두고 싶을때 사용
    
    	→ CURRENT_TIMESTAMP, NOW() 모두 같은 것
    
	- SHOW TABLES : 모든 테이블 조회(테이블명)
	- SHOW FULL COULMNS FROM 테이블명 : 테이블에 포함된 모든 칼럼 조
	
--------------------------------------------------------------------------------------------------

Body에 담기는 데이터 형식 => JSON(JavaScript Object Notation)

- "웹 서비스"란? 컴퓨터와 컴퓨터 간의 상호 작용(데이터 흐름)을 위한 시스템
- "RESTful"란? 
	- REST의 요소 3가지 : 자원(URL), 행위(HTTP Method), 표현(Representation)

@RequestBody : 비동기 통신에서 쓰이는 Body 안의 데이터(JSON객체)를 자바 객체(VO)로 변환해주는 어노테이션.
@ResponseBody : 자바 객체(vo)를 데이터(JSON객체)로 바꿔 Body 안에 넣어주는 어노테이션.

---------------------------------------------------------------------------------------------------

@Controller & @RestController 둘 다 Spring에서 Controller를 지정해주기 위한 어노테이션.

@Controller - Spring MVC의 controller -> 주로 View를 반환하기 위해 사용 but. Data를 반환해야 하는 경우도 있지요
										-> Data를 반환하기 위해 @ResponseBody 어노테이션 활용. (JSON 형태의 데이터)
										
@Controller
@RequiredArgsConstructor
public class TestController {
 
	private final MemberService memberService;
	
    @GetMapping("api/board/member")
    public @ResponseBody ResponseEntity<Member> findMember(@RequestParam("id") String id) { 
    					// findMember()는 Member 객체를 ResponseEntity로 감싸서 반환
    					// Member를 JSON을 반환하기 위해 @ResponseBody
        return ResponseEntity.ok(memberService.findMember(member));}}
										
@RestController - RESTful 웹 서비스의 Contorller => Restful Web Service에서 사용되는 컨트롤러 어노테이션
												-> @Controller + @ResponseBody가 합쳐진 형태로 JSON 형태 또는 XML형식으로 객체 데이터 반환
												
**************************************************************************************************************************												
RestController는 'REST'를 위한 전용 Controller이다.
	REST란? 네트워크를 경유해서 외부 서버에 접속하거나 필요한 정보를 불러오기 위한 구조라고 생각할 수 있다. 
		    그리고 이 REST 개념을 바탕으로 설계된 시스템을 'RESTFul'이라고 표현한다. -> 자원(URL), 행위(HTTP ,Method), 표현(Representation)

REST의 경우, 클라이언트가 특정 URL에 접속하면 웹페이지를 그리는 것이 아니라 특정 정보 또는 특정 처리 결과를 텍스트 형태로 반환
***************************************************************************************************************************			
@RestController
@RequiredArgsConstructor
public class TestController {
 
	private final MemberService memberService;
    
    @GetMapping("api/board/member")
    public Member findMember(@RequestParam("id") String id) {
    	return memberService.findMember(member);
    }
	
    @GetMapping("api/board/member")
    public ResponseEntity<Member> findMemberResponseEntity(@RequestParam("id") String id) {
        
        return ResponseEntity.ok(memberService.findMember(member));
    }
}									

<<<<<<<<<<<<<<<<<<<<주요 차이점>>>>>>>>>>>>>>>>>>>>
1. HTTP ResponseBody가 생성되는 방식(단, JSON 형태의 객체 데이터를 반환하는 사실은 같어)
2. @Controller + @ResponseBody = @RestController

-----------------------------------------------------------------------------------------------------

웹 : 인터넷 망 안에서 정보를 공유, 검색할 수 있게 하는 시스템이다.
서버 : 네트워크를 통해 클라이언트에게 정보나 서비스를 제공하는 컴퓨터 시스템
웹 서버 : 인터넷을 기반으로 클라이언트에게 웹 서비스를 제공하는 컴퓨터
	* 클라이언트 입장 -> 웹 서버에게 주소(URL)을 가지고 통신 규칙(HTTP)에 맞게 요청하면, 알맞은 내용(HTML)을 응답 받음 -> 검색창에 URL치면 화면 나오는 것
	* 서버 입장 -> 클라이언트의 요청을 기다리고, 웹 요청(HTTP)에 대한 데이터를 만들어서 응답, 
				이때 데이터는 웹에서 처리할 수 있는 HTML,CSS, 이미지 등 정적인 데이터로 한정

BUT. 웹 서버에서 브라우저에게 html을 주기 전에 애플리케이션을 돌려서 데이터를 만들고 그 만든 데이터를 넣어 주면 간단하지만,
	 html은 프로그래밍 언어가 아닌, 마크업 언어라 해결 불가능.
	 -> 이에 따라, 비즈니스 로직 처리나 DB연동 문제를 해결하기 위해 등장한게 WAS.
	
WAS란? 
	- 웹 애플리케이션을 실행시켜 필요한 기능을 수행하고 그 결과를 웹 서버에게 전달하는 일종의 미들웨어
	- 동적인 페이지를 만들어낼 수 있는 서버
	- 프로그램 실행 환경과 데이터베이스 접속 기능 제공
	- 비즈니스 로직 수행 가능 -> 비즈니스 로직이 뭐지??
	- 웹 서버 + 웹 컨테이너(jsp, servlet을 실행시킬 수 있는 소프트웨어)를 합친 형태이다.
	-> 어떤 애플리케이션을 돌리고, DB를 연결하고, 어떤 로직을 수행해서, 만든 데이터를 전달할 수 있다.
동작방식
	client가 동적 페이지 요청을 보내면, 웹서버가 받고 컨테이너로 전송
	받은 컨테이너는 servlet 구동환경을 제공하고, 동적 컨텐츠를 생성해서
	다시 서버에게 보내고, 서버는 클라이언트에게 보냄다.
* 서블릿이란? 동적 웹 페이지를 만들 때 사용되는 자바 기반의 웹 애플리케이션 프로그래밍 기술이다.
			웹 요청과 응답의 흐름을 간단한 메서드 호출만으로 체계적으로 다룰 수 있게 해준다. -> 서버에서 실행되다가 기능 수행 후 브라우저에게 결과전송

차이점) 웹 서버는 정적만 가능, 동적을 위해서는 was필요.

Q. WAS 안에 Server와 Container이 포함되어 있는건가? 
	Server가 먼저 받고 WAS안에 Container이 포함된건가. -> 서버 부하 방지 ,,,이 부분이 원래 알고있던점.
	-> 그냥 쓰임새에 따른 구조의 차이.
	
-------------------------------------------------------------------------------------------














